# Generated by ChatGPT (GPT-4o)
# LLM used: GPT-4o
# Prompt: "Based on the CloudySky chat app specification described, generate a Django models.py file implementing the following entities and relationships: UserType, Profile, SuppressionReason, Post, Comment, Media. Include necessary fields, relations, and suppression flags."

from django.db import models
from django.contrib.auth.models import User

class UserType(models.Model):
    SERF = 'serf'
    ADMIN = 'admin'
    TYPE_CHOICES = [
        (SERF, 'Serf'),
        (ADMIN, 'Administrator'),
    ]
    name = models.CharField(max_length=20, choices=TYPE_CHOICES, unique=True)

    def __str__(self):
        return self.get_name_display()

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    user_type = models.ForeignKey(UserType, on_delete=models.PROTECT, related_name='profiles')
    bio = models.TextField(blank=True)
    avatar = models.ForeignKey(
        'Media', on_delete=models.SET_NULL, null=True, blank=True, related_name='avatar_profiles'
    )

    def __str__(self):
        return f"{self.user.username} Profile"

class SuppressionReason(models.Model):
    code = models.CharField(max_length=50, unique=True)
    description = models.CharField(max_length=255)

    def __str__(self):
        return self.code

class Media(models.Model):
    IMAGE = 'image'
    OTHER = 'other'
    MEDIA_TYPES = [
        (IMAGE, 'Image'),
        (OTHER, 'Other'),
    ]
    uploaded_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, related_name='media'
    )
    file = models.ImageField(upload_to='media/')
    media_type = models.CharField(max_length=20, choices=MEDIA_TYPES, default=IMAGE)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        owner = self.uploaded_by.username if self.uploaded_by else 'Unknown'
        return f"Media {self.id} by {owner}"

class Post(models.Model):
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='posts'
    )
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    suppressed = models.BooleanField(default=False)
    suppression_reason = models.ForeignKey(
        SuppressionReason,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='posts'
    )
    media = models.ManyToManyField(
        Media, blank=True, related_name='posts'
    )

    def __str__(self):
        return f"Post {self.id} by {self.author.username}"

class Comment(models.Model):
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='comments'
    )
    post = models.ForeignKey(
        Post, on_delete=models.CASCADE, related_name='comments'
    )
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    suppressed = models.BooleanField(default=False)
    suppression_reason = models.ForeignKey(
        SuppressionReason,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='comments'
    )
    media = models.ManyToManyField(
        Media, blank=True, related_name='comments'
    )

    def __str__(self):
        return f"Comment {self.id} by {self.author.username} on Post {self.post.id}"
